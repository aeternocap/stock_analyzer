require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by the Rails when you ran the scaffold generator.

describe StockTransactionsController do

  def mock_stock_transaction(stubs={})
    @mock_stock_transaction ||= mock_model(StockTransaction, stubs).as_null_object
  end

  describe "GET index" do
    it "assigns all stock_transactions as @stock_transactions" do
      StockTransaction.stub(:all) { [mock_stock_transaction] }
      get :index
      assigns(:stock_transactions).should eq([mock_stock_transaction])
    end
  end

  describe "GET show" do
    it "assigns the requested stock_transaction as @stock_transaction" do
      StockTransaction.stub(:find).with("37") { mock_stock_transaction }
      get :show, :id => "37"
      assigns(:stock_transaction).should be(mock_stock_transaction)
    end
  end

  describe "GET new" do
    it "assigns a new stock_transaction as @stock_transaction" do
      StockTransaction.stub(:new) { mock_stock_transaction }
      get :new
      assigns(:stock_transaction).should be(mock_stock_transaction)
    end
  end

  describe "GET edit" do
    it "assigns the requested stock_transaction as @stock_transaction" do
      StockTransaction.stub(:find).with("37") { mock_stock_transaction }
      get :edit, :id => "37"
      assigns(:stock_transaction).should be(mock_stock_transaction)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "assigns a newly created stock_transaction as @stock_transaction" do
        StockTransaction.stub(:new).with({'these' => 'params'}) { mock_stock_transaction(:save => true) }
        post :create, :stock_transaction => {'these' => 'params'}
        assigns(:stock_transaction).should be(mock_stock_transaction)
      end

      it "redirects to the created stock_transaction" do
        StockTransaction.stub(:new) { mock_stock_transaction(:save => true) }
        post :create, :stock_transaction => {}
        response.should redirect_to(stock_transaction_url(mock_stock_transaction))
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved stock_transaction as @stock_transaction" do
        StockTransaction.stub(:new).with({'these' => 'params'}) { mock_stock_transaction(:save => false) }
        post :create, :stock_transaction => {'these' => 'params'}
        assigns(:stock_transaction).should be(mock_stock_transaction)
      end

      it "re-renders the 'new' template" do
        StockTransaction.stub(:new) { mock_stock_transaction(:save => false) }
        post :create, :stock_transaction => {}
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested stock_transaction" do
        StockTransaction.stub(:find).with("37") { mock_stock_transaction }
        mock_stock_transaction.should_receive(:update_attributes).with({'these' => 'params'})
        put :update, :id => "37", :stock_transaction => {'these' => 'params'}
      end

      it "assigns the requested stock_transaction as @stock_transaction" do
        StockTransaction.stub(:find) { mock_stock_transaction(:update_attributes => true) }
        put :update, :id => "1"
        assigns(:stock_transaction).should be(mock_stock_transaction)
      end

      it "redirects to the stock_transaction" do
        StockTransaction.stub(:find) { mock_stock_transaction(:update_attributes => true) }
        put :update, :id => "1"
        response.should redirect_to(stock_transaction_url(mock_stock_transaction))
      end
    end

    describe "with invalid params" do
      it "assigns the stock_transaction as @stock_transaction" do
        StockTransaction.stub(:find) { mock_stock_transaction(:update_attributes => false) }
        put :update, :id => "1"
        assigns(:stock_transaction).should be(mock_stock_transaction)
      end

      it "re-renders the 'edit' template" do
        StockTransaction.stub(:find) { mock_stock_transaction(:update_attributes => false) }
        put :update, :id => "1"
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested stock_transaction" do
      StockTransaction.stub(:find).with("37") { mock_stock_transaction }
      mock_stock_transaction.should_receive(:destroy)
      delete :destroy, :id => "37"
    end

    it "redirects to the stock_transactions list" do
      StockTransaction.stub(:find) { mock_stock_transaction }
      delete :destroy, :id => "1"
      response.should redirect_to(stock_transactions_url)
    end
  end

end
