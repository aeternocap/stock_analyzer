require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by the Rails when you ran the scaffold generator.

describe ProfitAndLossesController do

  def mock_profit_and_loss(stubs={})
    @mock_profit_and_loss ||= mock_model(ProfitAndLoss, stubs).as_null_object
  end

  describe "GET index" do
    it "assigns all profit_and_losses as @profit_and_losses" do
      ProfitAndLoss.stub(:all) { [mock_profit_and_loss] }
      get :index
      assigns(:profit_and_losses).should eq([mock_profit_and_loss])
    end
  end

  describe "GET show" do
    it "assigns the requested profit_and_loss as @profit_and_loss" do
      ProfitAndLoss.stub(:find).with("37") { mock_profit_and_loss }
      get :show, :id => "37"
      assigns(:profit_and_loss).should be(mock_profit_and_loss)
    end
  end

  describe "GET new" do
    it "assigns a new profit_and_loss as @profit_and_loss" do
      ProfitAndLoss.stub(:new) { mock_profit_and_loss }
      get :new
      assigns(:profit_and_loss).should be(mock_profit_and_loss)
    end
  end

  describe "GET edit" do
    it "assigns the requested profit_and_loss as @profit_and_loss" do
      ProfitAndLoss.stub(:find).with("37") { mock_profit_and_loss }
      get :edit, :id => "37"
      assigns(:profit_and_loss).should be(mock_profit_and_loss)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "assigns a newly created profit_and_loss as @profit_and_loss" do
        ProfitAndLoss.stub(:new).with({'these' => 'params'}) { mock_profit_and_loss(:save => true) }
        post :create, :profit_and_loss => {'these' => 'params'}
        assigns(:profit_and_loss).should be(mock_profit_and_loss)
      end

      it "redirects to the created profit_and_loss" do
        ProfitAndLoss.stub(:new) { mock_profit_and_loss(:save => true) }
        post :create, :profit_and_loss => {}
        response.should redirect_to(profit_and_loss_url(mock_profit_and_loss))
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved profit_and_loss as @profit_and_loss" do
        ProfitAndLoss.stub(:new).with({'these' => 'params'}) { mock_profit_and_loss(:save => false) }
        post :create, :profit_and_loss => {'these' => 'params'}
        assigns(:profit_and_loss).should be(mock_profit_and_loss)
      end

      it "re-renders the 'new' template" do
        ProfitAndLoss.stub(:new) { mock_profit_and_loss(:save => false) }
        post :create, :profit_and_loss => {}
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested profit_and_loss" do
        ProfitAndLoss.stub(:find).with("37") { mock_profit_and_loss }
        mock_profit_and_loss.should_receive(:update_attributes).with({'these' => 'params'})
        put :update, :id => "37", :profit_and_loss => {'these' => 'params'}
      end

      it "assigns the requested profit_and_loss as @profit_and_loss" do
        ProfitAndLoss.stub(:find) { mock_profit_and_loss(:update_attributes => true) }
        put :update, :id => "1"
        assigns(:profit_and_loss).should be(mock_profit_and_loss)
      end

      it "redirects to the profit_and_loss" do
        ProfitAndLoss.stub(:find) { mock_profit_and_loss(:update_attributes => true) }
        put :update, :id => "1"
        response.should redirect_to(profit_and_loss_url(mock_profit_and_loss))
      end
    end

    describe "with invalid params" do
      it "assigns the profit_and_loss as @profit_and_loss" do
        ProfitAndLoss.stub(:find) { mock_profit_and_loss(:update_attributes => false) }
        put :update, :id => "1"
        assigns(:profit_and_loss).should be(mock_profit_and_loss)
      end

      it "re-renders the 'edit' template" do
        ProfitAndLoss.stub(:find) { mock_profit_and_loss(:update_attributes => false) }
        put :update, :id => "1"
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested profit_and_loss" do
      ProfitAndLoss.stub(:find).with("37") { mock_profit_and_loss }
      mock_profit_and_loss.should_receive(:destroy)
      delete :destroy, :id => "37"
    end

    it "redirects to the profit_and_losses list" do
      ProfitAndLoss.stub(:find) { mock_profit_and_loss }
      delete :destroy, :id => "1"
      response.should redirect_to(profit_and_losses_url)
    end
  end

end
